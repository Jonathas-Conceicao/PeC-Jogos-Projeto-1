#! /usr/bin/env runhaskell

import qualified System.Environment as Env
import qualified Data.IORef as Ref
import qualified Data.Char as Char
import GDScriptHandler

main = do
  files <- Env.getArgs
  sID <- Ref.newIORef 1
  putStr headerText
  mapM_ (genIndex sID) files
  putStr "\n\n"
  mapM_ genSection files

headerText :: String
headerText = "# GDScript documentation\n\
             \A ~sort of~ documentation for the classes for the RPG model implemented using the GDScript.  \n\
             \The documentation is generated based on the comments on the class file.  \n\
             \This file generated by this [script](genGDScriptDoc.hs).\n\n\
             \## Table of content\n"

genIndex :: Ref.IORef Int -> FilePath -> IO ()
genIndex rId fileName = do
  id <- Ref.readIORef rId
  putStr $ (show id) ++ ". "
  putStr $ "[" ++ takeBaseName fileName ++ "]"
  putStr $ "(#" ++ (map Char.toLower $ takeBaseName fileName) ++ ")\n"
  Ref.writeIORef rId (id+1)

genSection :: FilePath -> IO ()
genSection fileName = do
  file <- readFile fileName
  let l = lines file
  putStr $ "### " ++ takeBaseName fileName ++ "\n"
  putStr "```\n"
  putStr $ unlines $ map formatLine $ filterDefinitions l
  putStr "```\n"
  putStr "[up](#table-of-content)\n"

takeBaseName :: FilePath -> String
takeBaseName f = takeWhile (/='.') $ last $ splitIf (=='/') f

splitIf :: (Eq a) => (a -> Bool) -> [a] -> [[a]]
splitIf p l =  case dropWhile p l of
  [] -> []
  l' -> w : splitIf p l''
    where
      (w, l'') = break p l'
